import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime, timedelta
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import make_pipeline
import plotly.express as px
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –ö–ò–ü–∏–ê", page_icon="üìäü§ñ", layout="wide")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('kipia_combined.db')
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–±–æ—Ä–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ v2)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS instruments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        type TEXT NOT NULL,
        factory_number TEXT UNIQUE,
        measurement_range TEXT,
        accuracy TEXT,
        installation_location TEXT NOT NULL,
        last_verification_date TEXT,
        next_verification_date TEXT,
        status TEXT NOT NULL,
        notes TEXT,
        criticality INTEGER DEFAULT 1
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫–∞–∑–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ v2)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS failures (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        instrument_id INTEGER NOT NULL,
        failure_date TEXT NOT NULL,
        description TEXT NOT NULL,
        reason TEXT,
        actions_taken TEXT,
        repair_date TEXT,
        repair_status TEXT NOT NULL,
        responsible_person TEXT,
        used_parts TEXT,
        FOREIGN KEY (instrument_id) REFERENCES instruments (id)
    );
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Å–∫–ª–∞–¥–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ v2)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS inventory (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        type TEXT NOT NULL,
        part_number TEXT UNIQUE,
        quantity INTEGER NOT NULL,
        min_quantity INTEGER,
        optimal_quantity INTEGER,
        unit TEXT DEFAULT '—à—Ç.',
        location TEXT,
        supplier TEXT,
        lead_time INTEGER DEFAULT 14,
        notes TEXT,
        last_update TEXT,
        failure_rate FLOAT DEFAULT 0
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π –ø—Ä–∏–±–æ—Ä–æ–≤ –∏ –∑–∞–ø—á–∞—Å—Ç–µ–π (–Ω–æ–≤–∞—è –∏–∑ v2)
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS instrument_parts (
        instrument_id INTEGER NOT NULL,
        part_id INTEGER NOT NULL,
        usage_count INTEGER DEFAULT 1,
        PRIMARY KEY (instrument_id, part_id),
        FOREIGN KEY (instrument_id) REFERENCES instruments (id),
        FOREIGN KEY (part_id) REFERENCES inventory (id)
    )
    ''')

    conn.commit()
    return conn


conn = init_db()


# –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def get_data(query, params=None):
    return pd.read_sql(query, conn, params=params)


def execute_query(query, params=None):
    cursor = conn.cursor()
    cursor.execute(query, params or ())
    conn.commit()
    return cursor.lastrowid


# –§—É–Ω–∫—Ü–∏–∏ –∏–∑ v1 (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ö–µ–º—É)
def add_instrument(data):
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO instruments (
        name, type, factory_number, measurement_range, accuracy,
        installation_location, last_verification_date, next_verification_date, status, notes
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', data)
    conn.commit()


def update_instrument(instrument_id, data):
    cursor = conn.cursor()
    cursor.execute('''
    UPDATE instruments SET
        name=?, type=?, factory_number=?, measurement_range=?, accuracy=?,
        installation_location=?, last_verification_date=?, next_verification_date=?, status=?, notes=?
    WHERE id=?
    ''', (*data, instrument_id))
    conn.commit()


def delete_instrument(instrument_id):
    cursor = conn.cursor()
    cursor.execute('DELETE FROM instruments WHERE id=?', (instrument_id,))
    conn.commit()


def get_all_instruments():
    return get_data('SELECT * FROM instruments ORDER BY next_verification_date')


def get_instrument_by_id(instrument_id):
    return get_data('SELECT * FROM instruments WHERE id=?', (instrument_id,)).iloc[0]


def add_failure(data):
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO failures (
        instrument_id, failure_date, description, reason, actions_taken,
        repair_date, repair_status, responsible_person
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', data)
    conn.commit()


def get_all_failures():
    return get_data('''
    SELECT f.*, i.name as instrument_name, i.factory_number 
    FROM failures f
    LEFT JOIN instruments i ON f.instrument_id = i.id
    ORDER BY f.failure_date DESC
    ''')


def add_inventory_item(data):
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO inventory (
        name, type, part_number, quantity, min_quantity,
        unit, location, supplier, notes, last_update
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', data)
    conn.commit()


def get_all_inventory():
    return get_data('SELECT * FROM inventory ORDER BY name')


def get_low_stock_items():
    return get_data('''
    SELECT * FROM inventory 
    WHERE min_quantity IS NOT NULL AND quantity <= min_quantity
    ORDER BY quantity
    ''')


# –§—É–Ω–∫—Ü–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏–∑ v2
def prepare_failure_data():
    ten_years_ago = (datetime.now() - timedelta(days=365 * 10)).strftime('%Y-%m-%d')
    query = '''
    SELECT 
        i.type as instrument_type,
        ip.part_id,
        strftime('%Y', f.failure_date) as year,
        COUNT(*) as failures_count
    FROM failures f
    JOIN instruments i ON f.instrument_id = i.id
    JOIN instrument_parts ip ON i.id = ip.instrument_id
    WHERE f.failure_date >= ?
    GROUP BY i.type, ip.part_id, strftime('%Y', f.failure_date)
    '''
    failure_data = get_data(query, (ten_years_ago,))

    if failure_data.empty:
        return None

    pivot_data = failure_data.pivot_table(
        index=['instrument_type', 'part_id'],
        columns='year',
        values='failures_count',
        fill_value=0
    ).reset_index()

    pivot_data['total_failures'] = pivot_data.iloc[:, 2:].sum(axis=1)
    return pivot_data


def train_failure_model():
    data = prepare_failure_data()
    if data is None or len(data) < 2:
        return None

    X = data[['total_failures']]
    y = data.iloc[:, 2:-1].mean(axis=1)
    model = make_pipeline(StandardScaler(), LinearRegression())
    model.fit(X, y)
    return model


def predict_parts_demand():
    model = train_failure_model()
    if model is None:
        return None

    parts_query = '''
    SELECT 
        i.id as part_id,
        i.name,
        i.type,
        i.quantity,
        i.min_quantity,
        i.optimal_quantity,
        COALESCE(SUM(ip.usage_count), 0) as total_usage,
        COALESCE(COUNT(DISTINCT ip.instrument_id), 0) as instruments_count
    FROM inventory i
    LEFT JOIN instrument_parts ip ON i.id = ip.part_id
    GROUP BY i.id
    '''
    parts_data = get_data(parts_query)

    if parts_data.empty:
        return None

    failure_data = prepare_failure_data()
    if failure_data is not None:
        parts_data = parts_data.merge(
            failure_data[['part_id', 'total_failures']],
            on='part_id',
            how='left'
        )
        parts_data['total_failures'] = parts_data['total_failures'].fillna(0)
    else:
        parts_data['total_failures'] = 0

    X_pred = parts_data[['total_failures']]
    parts_data['predicted_demand'] = model.predict(X_pred).clip(0)
    parts_data['recommended_quantity'] = (parts_data['predicted_demand'] * 1.2).round().astype(int)
    parts_data['is_low_stock'] = (
            (parts_data['quantity'] < parts_data['recommended_quantity']) |
            ((parts_data['min_quantity'] > 0) & (parts_data['quantity'] < parts_data['min_quantity'])
             ))

    return parts_data.sort_values(by='is_low_stock', ascending=False)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ Excel
def import_from_excel(uploaded_file, table_name):
    try:
        df = pd.read_excel(uploaded_file)

        if table_name == "instruments":
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –≤ —Å—Ç—Ä–æ–∫–∏
            date_columns = ['last_verification_date', 'next_verification_date']
            for col in date_columns:
                if col in df.columns:
                    df[col] = pd.to_datetime(df[col]).dt.strftime('%Y-%m-%d')

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if 'status' not in df.columns:
                df['status'] = '–í —Ä–∞–±–æ—Ç–µ'
            if 'criticality' not in df.columns:
                df['criticality'] = 1

        elif table_name == "failures":
            if 'failure_date' in df.columns:
                df['failure_date'] = pd.to_datetime(df['failure_date']).dt.strftime('%Y-%m-%d')
            if 'repair_date' in df.columns:
                df['repair_date'] = pd.to_datetime(df['repair_date']).dt.strftime('%Y-%m-%d')
            if 'repair_status' not in df.columns:
                df['repair_status'] = '–ù–µ –Ω–∞—á–∞—Ç'

        elif table_name == "inventory":
            if 'unit' not in df.columns:
                df['unit'] = '—à—Ç.'
            if 'lead_time' not in df.columns:
                df['lead_time'] = 14
            if 'failure_rate' not in df.columns:
                df['failure_rate'] = 0
            if 'last_update' not in df.columns:
                df['last_update'] = datetime.now().strftime('%Y-%m-%d')

        # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        df.to_sql(table_name, conn, if_exists='append', index=False)
        return True, f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}"


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üìäü§ñ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—á–µ—Ç–∞ –ö–ò–ü–∏–ê —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_options = [
    "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
    "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π",
    "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"
]
main_choice = st.sidebar.selectbox("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", menu_options)

if main_choice == "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å":
    st.header("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—á–µ—Ç–∞ –ö–ò–ü–∏–ê")

    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π (–∏–∑ v1)
    action_options = [
        "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–∏–±–æ—Ä–æ–≤",
        "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–±–æ—Ä",
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±–æ—Ä",
        "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–±–æ—Ä",
        "–ñ—É—Ä–Ω–∞–ª –æ—Ç–∫–∞–∑–æ–≤",
        "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–∫–∞–∑–µ",
        "–°–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã",
        "–î–æ–±–∞–≤–∏—Ç—å —Å–∫–ª–∞–¥—Å–∫—É—é –ø–æ–∑–∏—Ü–∏—é",
        "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ñ–∏—Ü–∏—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"
    ]
    action = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", action_options)

    if action == "–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø—Ä–∏–±–æ—Ä–æ–≤":
        st.subheader("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–±–æ—Ä–æ–≤")
        df = get_all_instruments()

        if not df.empty:
            col1, col2, col3 = st.columns(3)
            with col1:
                filter_type = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É", ["–í—Å–µ"] + list(df['type'].unique()))
            with col2:
                filter_location = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏",
                                               ["–í—Å–µ"] + list(df['installation_location'].unique()))
            with col3:
                filter_status = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É", ["–í—Å–µ"] + list(df['status'].unique()))

            if filter_type != "–í—Å–µ":
                df = df[df['type'] == filter_type]
            if filter_location != "–í—Å–µ":
                df = df[df['installation_location'] == filter_location]
            if filter_status != "–í—Å–µ":
                df = df[df['status'] == filter_status]

            st.dataframe(df, use_container_width=True)

            st.download_button(
                label="–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV",
                data=df.to_csv(index=False).encode('utf-8'),
                file_name='kipia_instruments.csv',
                mime='text/csv'
            )
        else:
            st.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ –ø—É—Å—Ç–∞")

    elif action == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–±–æ—Ä":
        st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–±–æ—Ä–∞")
        with st.form("add_form"):
            col1, col2 = st.columns(2)

            with col1:
                name = st.text_input("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±–æ—Ä–∞*", max_chars=100)
                type_ = st.text_input("–¢–∏–ø –ø—Ä–∏–±–æ—Ä–∞*", max_chars=50)
                factory_number = st.text_input("–ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä*", max_chars=50)
                measurement_range = st.text_input("–î–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ—Ä–µ–Ω–∏–π", max_chars=50)
                accuracy = st.text_input("–ö–ª–∞—Å—Å —Ç–æ—á–Ω–æ—Å—Ç–∏", max_chars=20)

            with col2:
                installation_location = st.text_input("–ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏*", max_chars=100)
                last_verification_date = st.date_input("–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–≤–µ—Ä–∫–∏")
                next_verification_date = st.date_input("–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–≤–µ—Ä–∫–∏")
                status = st.selectbox("–°—Ç–∞—Ç—É—Å*", ["–í —Ä–∞–±–æ—Ç–µ", "–ù–∞ –ø–æ–≤–µ—Ä–∫–µ", "–í —Ä–µ–º–æ–Ω—Ç–µ", "–°–ø–∏—Å–∞–Ω"])
                notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", max_chars=500)

            submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–±–æ—Ä")

            if submitted:
                if not name or not type_ or not factory_number or not installation_location:
                    st.error("–ü–æ–ª—è —Å * –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                else:
                    data = (
                        name, type_, factory_number, measurement_range, accuracy,
                        installation_location,
                        last_verification_date.isoformat() if last_verification_date else None,
                        next_verification_date.isoformat() if next_verification_date else None,
                        status, notes
                    )
                    add_instrument(data)
                    st.success("–ü—Ä–∏–±–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

    elif action == "–ñ—É—Ä–Ω–∞–ª –æ—Ç–∫–∞–∑–æ–≤":
        st.subheader("–ñ—É—Ä–Ω–∞–ª –æ—Ç–∫–∞–∑–æ–≤ –ö–ò–ü–∏–ê")
        df = get_all_failures()

        if not df.empty:
            col1, col2 = st.columns(2)
            with col1:
                filter_status = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É —Ä–µ–º–æ–Ω—Ç–∞", ["–í—Å–µ"] + list(df['repair_status'].unique()))
            with col2:
                filter_instrument = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–±–æ—Ä—É", ["–í—Å–µ"] + list(df['instrument_name'].unique()))

            if filter_status != "–í—Å–µ":
                df = df[df['repair_status'] == filter_status]
            if filter_instrument != "–í—Å–µ":
                df = df[df['instrument_name'] == filter_instrument]

            st.dataframe(df, use_container_width=True)

            st.download_button(
                label="–≠–∫—Å–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞ –æ—Ç–∫–∞–∑–æ–≤",
                data=df.to_csv(index=False).encode('utf-8'),
                file_name='failures_log.csv',
                mime='text/csv'
            )
        else:
            st.warning("–ñ—É—Ä–Ω–∞–ª –æ—Ç–∫–∞–∑–æ–≤ –ø—É—Å—Ç")

    elif action == "–°–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã":
        st.subheader("–£—á–µ—Ç —Å–∫–ª–∞–¥—Å–∫–∏—Ö –∑–∞–ø–∞—Å–æ–≤")
        df = get_all_inventory()

        if not df.empty:
            col1, col2 = st.columns(2)
            with col1:
                filter_type = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É", ["–í—Å–µ"] + list(df['type'].unique()))
            with col2:
                filter_location = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—Ç—É —Ö—Ä–∞–Ω–µ–Ω–∏—è", ["–í—Å–µ"] + list(df['location'].unique()))

            if filter_type != "–í—Å–µ":
                df = df[df['type'] == filter_type]
            if filter_location != "–í—Å–µ":
                df = df[df['location'] == filter_location]

            st.dataframe(df, use_container_width=True)

            st.download_button(
                label="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∞—Å–∞—Ö",
                data=df.to_csv(index=False).encode('utf-8'),
                file_name='inventory.csv',
                mime='text/csv'
            )
        else:
            st.warning("–°–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ v1 –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ

elif main_choice == "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π":
    st.header("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ–º")

    # –ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–∏–∑ v2)
    analytics_options = [
        "–û–±–∑–æ—Ä –ø—Ä–∏–±–æ—Ä–æ–≤",
        "–ñ—É—Ä–Ω–∞–ª –æ—Ç–∫–∞–∑–æ–≤",
        "–°–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã",
        "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–∞",
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    ]
    analytics_choice = st.sidebar.selectbox("–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", analytics_options)

    if analytics_choice == "–û–±–∑–æ—Ä –ø—Ä–∏–±–æ—Ä–æ–≤":
        st.subheader("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–±–æ—Ä–æ–≤")
        instruments = get_data("SELECT * FROM instruments")
        st.dataframe(instruments, use_container_width=True)

    elif analytics_choice == "–ñ—É—Ä–Ω–∞–ª –æ—Ç–∫–∞–∑–æ–≤":
        st.subheader("–ñ—É—Ä–Ω–∞–ª –æ—Ç–∫–∞–∑–æ–≤")
        failures = get_data('''
        SELECT f.*, i.name as instrument_name 
        FROM failures f JOIN instruments i ON f.instrument_id = i.id
        ORDER BY f.failure_date DESC
        ''')
        st.dataframe(failures, use_container_width=True)

    elif analytics_choice == "–°–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã":
        st.subheader("–°–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã")
        inventory = get_data("SELECT * FROM inventory ORDER BY quantity ASC")
        st.dataframe(inventory, use_container_width=True)

    elif analytics_choice == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–∞":
        st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π")

        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            prediction = predict_parts_demand()

        if prediction is None:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–∫–∞–∑–∞—Ö.")
        else:
            st.subheader("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏ –∑–∞–ø–∞—Å–æ–≤")

            fig = px.bar(
                prediction,
                x='name',
                y=['quantity', 'recommended_quantity'],
                barmode='group',
                labels={'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'name': '–ó–∞–ø—á–∞—Å—Ç—å'},
                color_discrete_map={
                    'quantity': 'blue',
                    'recommended_quantity': 'red'
                }
            )
            st.plotly_chart(fig, use_container_width=True)

            st.dataframe(
                prediction[['name', 'type', 'quantity', 'min_quantity',
                            'recommended_quantity', 'is_low_stock']],
                use_container_width=True
            )

            if st.button("–û–±–Ω–æ–≤–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–ø–∞—Å—ã –Ω–∞ —Å–∫–ª–∞–¥–µ"):
                for _, row in prediction.iterrows():
                    execute_query(
                        "UPDATE inventory SET optimal_quantity=? WHERE id=?",
                        (row['recommended_quantity'], row['part_id'])
                    )
                st.success("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–ø–∞—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

    elif analytics_choice == "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        st.subheader("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∫–∞–∑–æ–≤ –∏ –∑–∞–ø–∞—Å–æ–≤")

        st.subheader("–ß–∞—Å—Ç–æ—Ç–∞ –æ—Ç–∫–∞–∑–æ–≤ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–±–æ—Ä–æ–≤")
        failure_by_type = get_data('''
        SELECT i.type, COUNT(*) as failures_count
        FROM failures f JOIN instruments i ON f.instrument_id = i.id
        GROUP BY i.type
        ORDER BY failures_count DESC
        ''')

        if not failure_by_type.empty:
            fig1 = px.pie(
                failure_by_type,
                names='type',
                values='failures_count',
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–æ–≤ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–∏–±–æ—Ä–æ–≤'
            )
            st.plotly_chart(fig1, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–∫–∞–∑–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        st.subheader("–¢–æ–ø –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ —Ä–∞—Å—Ö–æ–¥—É")
        parts_usage = get_data('''
        SELECT i.name, i.type, SUM(ip.usage_count) as total_usage
        FROM instrument_parts ip JOIN inventory i ON ip.part_id = i.id
        GROUP BY i.id
        ORDER BY total_usage DESC
        LIMIT 10
        ''')

        if not parts_usage.empty:
            fig2 = px.bar(
                parts_usage,
                x='name',
                y='total_usage',
                color='type',
                labels={'name': '–ó–∞–ø—á–∞—Å—Ç—å', 'total_usage': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π'}
            )
            st.plotly_chart(fig2, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–µ –∑–∞–ø—á–∞—Å—Ç–µ–π")

elif main_choice == "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel":
    st.header("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel")
    table_options = {
        "–ü—Ä–∏–±–æ—Ä—ã": "instruments",
        "–û—Ç–∫–∞–∑—ã": "failures",
        "–°–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã": "inventory",
        "–°–≤—è–∑–∏ –ø—Ä–∏–±–æ—Ä–æ–≤ –∏ –∑–∞–ø—á–∞—Å—Ç–µ–π": "instrument_parts"
    }
    selected_table = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞", list(table_options.keys()))
    table_name = table_options[selected_table]
    
    uploaded_file = st.file_uploader(f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {selected_table}", type=['xlsx', 'xls'])
    
    if uploaded_file is not None:
        st.info("–ü–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–±–ª–∏—Ü–µ:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
        if table_name == "instruments":
            st.write("–û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: name, type, factory_number, measurement_range, accuracy, installation_location, last_verification_date, next_verification_date, status, notes")
        elif table_name == "failures":
            st.write("–û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: instrument_id, failure_date, description, reason, actions_taken, repair_date, repair_status, responsible_person")
        elif table_name == "inventory":
            st.write("–û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: name, type, part_number, quantity, min_quantity, unit, location, supplier, notes")
        elif table_name == "instrument_parts":
            st.write("–û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: instrument_id, part_id, usage_count")

        if st.button("–ù–∞—á–∞—Ç—å –∏–º–ø–æ—Ä—Ç"):
            try:
                df = pd.read_excel(uploaded_file)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è instrument_parts
                if table_name == "instrument_parts":
                    required_columns = ['instrument_id', 'part_id', 'usage_count']
                    if not all(col in df.columns for col in required_columns):
                        st.error("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: instrument_id, part_id, usage_count")
                        st.stop()
                    else:
                        df['usage_count'] = pd.to_numeric(df['usage_count'], errors='coerce').fillna(1).astype(int)

                # –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                df.to_sql(table_name, conn, if_exists='append', index=False)
                st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É `{table_name}`")
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
conn.close()